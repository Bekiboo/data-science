---
title: "Client Report - Project 3: Finding relationships in baseball"
subtitle: "Course DS 250"
author: "Julien Connault"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

## Elevator pitch
_This dataset is the Lahman Baseball db, a database containing complete batting and pitching statistics from 1871 to 2018, plus fielding statistics, standings, team stats, managerial records, post-season data, and more. Here we used it to retrieve information about BYU-Idaho baseball players, batting averages, and average salaries for the New York Yankees and the Boston Red Sox._


```{python}
# | label: Monthly Airline Delays by Airport for US Flights, 2003-2016
# | code-summary: Read project data

import pandas as pd
import numpy as np
import altair as alt
import sqlite3

sqlite_file = "lahmansbaseballdb.sqlite"
con = sqlite3.connect(sqlite_file)
```

## QUESTION|TASK 1
__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__

```{python}
# | label: Q1
# | code-summary: SQL query that creates a new dataframe about baseball players who attended BYU-Idaho

q = "SELECT cp.playerID, cp.schoolID, s.salary, cp.yearID, s.teamID FROM collegeplaying AS cp JOIN salaries AS s ON cp.playerID = s.playerID WHERE cp.schoolID = 'idbyuid' ORDER BY s.salary DESC;"

byuidaho = pd.read_sql_query(q, con)
byuidaho
```


## QUESTION|TASK 2
__This three-part question requires you to calculate batting average (number of hits divided by the number of at-bats)__


- Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.
```{python}
# | label: Q2 part 1
# | code-summary: Retrieves top 5 players' batting averages for a year with at least 1 at-bats.

q = "SELECT playerID, yearID, H, AB, CAST(H AS REAL) / CAST(AB AS REAL) AS batting_average FROM batting WHERE AB > 1 ORDER BY batting_average DESC, playerID ASC LIMIT 5;"

batting = pd.read_sql_query(q, con)
batting
```

- Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.
```{python}
# | label: Q2 part 2
# | code-summary: Retrieves top 5 players' batting averages for a year with at least 10 at-bats.

q = "SELECT playerID, yearID, H, AB, CAST(H AS REAL) / CAST(AB AS REAL) AS batting_average FROM batting WHERE AB > 10 ORDER BY batting_average DESC, playerID ASC LIMIT 5;"

batting = pd.read_sql_query(q, con)
batting
```

- Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.
```{python}
# | label: Q2 part 3
# | code-summary: Calculates the career batting averages for players with at least 100 at-bats, showing the top 5 results.

q = "SELECT playerID, AVG(CAST(H AS REAL) / CAST(AB AS REAL)) AS career_batting_average FROM batting WHERE AB > 100 GROUP BY playerID ORDER BY career_batting_average DESC, playerID ASC LIMIT 5;"

batting = pd.read_sql_query(q, con)
batting
```


## QUESTION|TASK 3
__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph in Altair to visualize the comparison. What do you learn?__

_The New York Yankees and the Boston Red Sox had a similar average salary throughout the eighties, but starting in the end nineties the Yankees average salary exceeded the Red Sox' and the gap widened in the 2000's._
```{python}
# | label: Q3
# | code-summary: Average player salaries for 'NYA' and 'BOS' by year.

# SQL Query
q = "SELECT s.teamID, s.yearID, AVG(s.salary) AS average_salary FROM salaries AS s JOIN teams AS t ON s.teamID = t.teamID WHERE t.teamID IN ('NYA', 'BOS') GROUP BY s.teamID, s.yearID;"
salary = pd.read_sql_query(q, con)

# Altair Graph
alt.Chart(salary).mark_line().encode(
    x=alt.X("yearID", title="Year", axis=alt.Axis(format="d")),
    y=alt.Y("average_salary", title="Average Salary"),
    color="teamID",
)
```

## APPENDIX A (All Python Code)

```python
```
```
import pandas as pd
import numpy as np
import altair as alt
import sqlite3

# Read project data
sqlite_file = "lahmansbaseballdb.sqlite"
con = sqlite3.connect(sqlite_file)

# SQL query that creates a new dataframe about baseball players who attended BYU-Idaho
q = "SELECT cp.playerID, cp.schoolID, s.salary, cp.yearID, s.teamID FROM collegeplaying AS cp JOIN salaries AS s ON cp.playerID = s.playerID WHERE cp.schoolID = 'idbyuid' ORDER BY s.salary DESC;"

byuidaho = pd.read_sql_query(q, con)
byuidaho

# Retrieves top 5 players' batting averages for a year with at least 1 at-bats.
q = "SELECT playerID, yearID, H, AB, CAST(H AS REAL) / CAST(AB AS REAL) AS batting_average FROM batting WHERE AB > 1 ORDER BY batting_average DESC, playerID ASC LIMIT 5;"

batting = pd.read_sql_query(q, con)
batting

# Retrieves top 5 players' batting averages for a year with at least 10 at-bats.
q = "SELECT playerID, yearID, H, AB, CAST(H AS REAL) / CAST(AB AS REAL) AS batting_average FROM batting WHERE AB > 10 ORDER BY batting_average DESC, playerID ASC LIMIT 5;"

batting = pd.read_sql_query(q, con)
batting

# Calculates the career batting averages for players with at least 100 at-bats, showing the top 5 results.
q = "SELECT playerID, AVG(CAST(H AS REAL) / CAST(AB AS REAL)) AS career_batting_average FROM batting WHERE AB > 100 GROUP BY playerID ORDER BY career_batting_average DESC, playerID ASC LIMIT 5;"

batting = pd.read_sql_query(q, con)
batting

# SQL Query
q = "SELECT s.teamID, s.yearID, AVG(s.salary) AS average_salary FROM salaries AS s JOIN teams AS t ON s.teamID = t.teamID WHERE t.teamID IN ('NYA', 'BOS') GROUP BY s.teamID, s.yearID;"
salary = pd.read_sql_query(q, con)

# Altair Graph
alt.Chart(salary).mark_line().encode(
    x=alt.X("yearID", title="Year"),
    y=alt.Y("average_salary", title="Average Salary"),
    color='teamID'
)
```
```
```
